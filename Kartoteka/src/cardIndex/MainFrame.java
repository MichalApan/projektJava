/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cardIndex;

import java.awt.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.List;
import java.util.Vector;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import model.*;

/**
 *
 * @author Michał
 */
public class MainFrame extends javax.swing.JFrame implements WindowListener, TableModelListener {

    private CardIndex k;
    private final JComboBox cb = new JComboBox();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setDimensions();

        jPanelTable.setVisible(false);
        jMenuBar1.setVisible(false);
    }

    private void setDimensions() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation(new Point((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelTable = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanelLogIn = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldLogIn = new javax.swing.JTextField();
        jButtonLogIn = new javax.swing.JButton();
        jPasswordFieldLogIn = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelLogo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        InfoMenuButton = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemAdd = new javax.swing.JMenuItem();
        jMenuItemDelete = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItemEdition = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kartoteka by Apan");
        setResizable(false);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jTabbedPane1.addTab("Harcerze", jScrollPane1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jTable2);

        jTabbedPane1.addTab("Sprawności", jScrollPane2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jTable3);

        jTabbedPane1.addTab("Stopnie", jScrollPane3);

        javax.swing.GroupLayout jPanelTableLayout = new javax.swing.GroupLayout(jPanelTable);
        jPanelTable.setLayout(jPanelTableLayout);
        jPanelTableLayout.setHorizontalGroup(
            jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );
        jPanelTableLayout.setVerticalGroup(
            jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelTable);

        jPanelLogIn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardIndex/images/lilijka170.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 180));

        jTextFieldLogIn.setText("gr3_apan");
        jTextFieldLogIn.setToolTipText("");
        jPanel1.add(jTextFieldLogIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 80, -1));

        jButtonLogIn.setText("Zaloguj");
        jButtonLogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogInActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonLogIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 80, -1));

        jPasswordFieldLogIn.setText("ziemniak");
        jPanel1.add(jPasswordFieldLogIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 80, -1));

        jLabel3.setText("Login:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 80, -1));

        jLabel2.setText("Hasło:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 80, -1));
        jPanel1.add(jLabelLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanelLogIn.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 270, 180));

        getContentPane().add(jPanelLogIn);

        jMenu1.setText("Funkcje");

        InfoMenuButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        InfoMenuButton.setText("Info");
        InfoMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InfoMenuButtonActionPerformed(evt);
            }
        });
        jMenu1.add(InfoMenuButton);
        jMenu1.add(jSeparator1);

        jMenuItemAdd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAdd.setText("Dodaj");
        jMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAdd);

        jMenuItemDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemDelete.setText("Usuń");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemDelete);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opcje");

        jCheckBoxMenuItemEdition.setSelected(true);
        jCheckBoxMenuItemEdition.setText("Edycja");
        jCheckBoxMenuItemEdition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemEditionActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItemEdition);
        jMenu2.add(jSeparator2);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemExit.setText("Wyjście");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemExit);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogInActionPerformed
        try {
            jPanelLogIn.setVisible(false);
            String login = jTextFieldLogIn.getText();
            String passwd = new String(jPasswordFieldLogIn.getPassword());
            k = new CardIndex(login, passwd);

            scoutTableInit();
            badgeTableInit();
            scoutRankTableInit();

            jPanelTable.setVisible(true);
            jMenuBar1.setVisible(true);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButtonLogInActionPerformed

    private void InfoMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InfoMenuButtonActionPerformed
        if (jTabbedPane1.getSelectedIndex() == 0) {
            int row = jTable1.getSelectedRow();
            int pesel = Integer.parseInt(jTable1.getValueAt(row, 0).toString());
            if (row >= 0 && row < jTable1.getRowCount()) {
                List<Scout> l = k.selectScouts();

                for (Scout s : l) {
                    if (s.getPesel() == pesel) {
                        ScoutFrame sf = new ScoutFrame(k, s);

                        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                        Dimension frameSize = sf.getSize();
                        if (frameSize.height > screenSize.height) {
                            frameSize.height = screenSize.height;
                        }
                        if (frameSize.width > screenSize.width) {
                            frameSize.width = screenSize.width;
                        }

                        sf.setLocation((screenSize.width - frameSize.width) / 2,
                                (screenSize.height - frameSize.height) / 2);
                        sf.setVisible(true);
                        sf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                    }
                }
            }
        }
    }//GEN-LAST:event_InfoMenuButtonActionPerformed

    private void jCheckBoxMenuItemEditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemEditionActionPerformed
        jTable1.setEnabled(!jTable1.isEnabled());
        jTable2.setEnabled(!jTable2.isEnabled());
        jTable3.setEnabled(!jTable3.isEnabled());
    }//GEN-LAST:event_jCheckBoxMenuItemEditionActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        k.closeConnection();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
        switch (jTabbedPane1.getSelectedIndex()) {
            case 0: {
                int row = jTable1.getSelectedRow();
                int pesel = Integer.parseInt(jTable1.getValueAt(row, 0).toString());
                if (row >= 0) {
                    k.deleteScout(pesel);
                }
                break;
            }
            case 1: {
                boolean check = true;
                String errMsg = "Tę sprawność posiada: ";
                int row = jTable2.getSelectedRow();
                if (row >= 0) {
                    int id = Integer.parseInt(jTable2.getValueAt(row, 0).toString());
                    List<GainedBadge> l = k.selectGainedBadge();
                    for (GainedBadge g : l) {
                        if (g.getBadgeId() == id) {
                            errMsg = errMsg.concat("\n\t" + g.getPesel());
                            check = false;
                        }
                    }
                    if (check) {
                        k.deleteBadge(id);
                    } else {

                        JOptionPane.showMessageDialog(this, errMsg,
                                "Błąd", JOptionPane.ERROR_MESSAGE);
                    }
                }
                break;
            }
            case 2: {
                boolean check = true;
                String errMsg = "Ten stopień posiada: ";
                int row = jTable3.getSelectedRow();
                if (row >= 0) {
                    int id = Integer.parseInt(jTable3.getValueAt(row, 0).toString());
                    List<Scout> l = k.selectScouts();
                    for (Scout g : l) {
                        if (g.getScoutRankId() == id) {
                            errMsg = errMsg.concat("\n\t" + g.getPesel());
                            check = false;
                        }
                    }
                    if (check) {
                        k.deleteScoutRank(id);
                    } else {
                        JOptionPane.showMessageDialog(this, errMsg,
                                "Błąd", JOptionPane.ERROR_MESSAGE);
                    }
                }
                break;
            }
            default:
                break;
        }
        scoutRankTableInit();
        badgeTableInit();
        scoutTableInit();
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void jMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddActionPerformed
        String input;
        switch (jTabbedPane1.getSelectedIndex()) {
            case 0:
                input = JOptionPane.showInputDialog(this, "Podaj pesel:", "Dodaj", JOptionPane.QUESTION_MESSAGE);
                if (!"".equals(input)) {
                    try {
                        int pesel = Integer.parseInt(input);
                        k.insertScout(pesel, "", "", 1);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Nieprawidłowa wartość", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                break;

            case 1:
                input = JOptionPane.showInputDialog(this, "Podaj id:", "Dodaj", JOptionPane.QUESTION_MESSAGE);
                if (!"".equals(input)) {
                    try {
                        int id = Integer.parseInt(input);
                        k.insertBadge(id, "", "");
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Nieprawidłowa wartość", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                break;
            case 2:
                input = JOptionPane.showInputDialog(this, "Podaj id:", "Dodaj", JOptionPane.QUESTION_MESSAGE);
                if (!"".equals(input)) {
                    try {
                        int id = Integer.parseInt(input);
                        k.insertScoutRank(id, "");
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Nieprawidłowa wartość", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                }
            default:
                break;
        }
        scoutRankTableInit();

        badgeTableInit();

        scoutTableInit();
    }//GEN-LAST:event_jMenuItemAddActionPerformed

    private void scoutTableInit() {
        DefaultTableModel dtmScouts = new DefaultTableModel();
        dtmScouts.addTableModelListener(this);
        jTable1.setModel(dtmScouts);
        jTable1.removeAll();

        String[] columnsScouts = {"PESEL", "Imię", "Nazwisko", "Stopień"};
        setColumns(dtmScouts, columnsScouts);

        List<Scout> scouts = k.selectScouts();

        for (int i = 0; i < scouts.size(); i++) {
            Scout s = scouts.get(i);

            Vector<String> r = new Vector<>();
            r.addElement("" + s.getPesel());
            r.addElement("" + s.getName());
            r.addElement("" + s.getSurname());
            ScoutRank rank = translateIdToRank(s.getScoutRankId());
            r.addElement("" + rank.getTitle());
            dtmScouts.addRow(r);
        }

        TableColumn rankColumn = jTable1.getColumnModel().getColumn(3);
        List<ScoutRank> l = k.selectScoutRank();
        cb.removeAllItems();
        for (ScoutRank r : l) {
            cb.addItem(r.getTitle());
        }
        rankColumn.setCellEditor(new DefaultCellEditor(cb));
    }

    private void badgeTableInit() {
        DefaultTableModel dtmBadges = new DefaultTableModel();
        dtmBadges.addTableModelListener(this);
        jTable2.setModel(dtmBadges);
        jTable2.removeAll();

        String[] columnsBadges = {"ID", "Nazwa", "Zadania"};
        setColumns(dtmBadges, columnsBadges);

        List<Badge> badges = k.selectBadges();

        for (int i = 0; i < badges.size(); i++) {
            Badge b = badges.get(i);

            Vector<String> r = new Vector<>();
            r.addElement("" + b.getId());
            r.addElement("" + b.getTitle());
            r.addElement("" + b.getTasks());
            dtmBadges.addRow(r);
        }
    }

    private void scoutRankTableInit() {
        DefaultTableModel dtmScoutRanks = new DefaultTableModel();
        dtmScoutRanks.addTableModelListener(this);
        jTable3.setModel(dtmScoutRanks);
        jTable3.removeAll();

        String[] columnsScoutRank = {"ID", "Nazwa"};
        setColumns(dtmScoutRanks, columnsScoutRank);

        List<ScoutRank> scoutRank = k.selectScoutRank();

        for (int i = 0; i < scoutRank.size(); i++) {
            ScoutRank s = scoutRank.get(i);

            Vector<String> r = new Vector<>();
            r.addElement("" + s.getScoutRankId());
            r.addElement("" + s.getTitle());
            dtmScoutRanks.addRow(r);
        }
    }

    private ScoutRank translateIdToRank(int id) {

        List<ScoutRank> l = k.selectScoutRank();
        for (ScoutRank sr : l) {
            if (sr.getScoutRankId() == id) {
                return sr;
            }
        }
        return null;
    }

    private ScoutRank translateRankTitleToId(String title) {
        List<ScoutRank> l = k.selectScoutRank();
        for (ScoutRank sr : l) {
            if (sr.getTitle().equals(title)) {
                return sr;
            }
        }
        return null;
    }

    private void setColumns(DefaultTableModel tbm, String[] columns) {
        for (String column : columns) {
            tbm.addColumn(column);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem InfoMenuButton;
    private javax.swing.JButton jButtonLogIn;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemEdition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAdd;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelLogIn;
    private javax.swing.JPanel jPanelTable;
    private javax.swing.JPasswordField jPasswordFieldLogIn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextFieldLogIn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowClosing(WindowEvent e) {
        k.closeConnection();
    }

    @Override
    public void windowClosed(WindowEvent e) {
        k.closeConnection();
    }

    @Override
    public void windowIconified(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        int row = e.getFirstRow();
        int column = e.getColumn();
        TableModel model = (TableModel) e.getSource();

        if (row >= 0 && column >= 0) {
            String table = null;
            String columnName = null;
            String id = null;
            Object data = model.getValueAt(row, column).toString();
            int pesel = Integer.parseInt(model.getValueAt(row, 0).toString());
            switch (jTabbedPane1.getSelectedIndex()) {
                case 0:
                    table = "scouts";
                    columnName = (new Scout()).getColumnAt(column);
                    id = (new Scout()).getColumnAt(0);
                    if ("scoutRankId".equals(columnName)) {
                        String title = cb.getSelectedItem().toString();
                        ScoutRank r = translateRankTitleToId(title);
                        data = "" + r.getScoutRankId();
                    }
                    break;
                case 1:
                    table = "badges";
                    columnName = (new Badge()).getColumnAt(column);
                    id = (new Badge()).getColumnAt(0);
                    break;
                case 2:
                    table = "scoutRanks";
                    columnName = (new ScoutRank()).getColumnAt(column);
                    id = (new ScoutRank()).getColumnAt(0);
                    break;
                default:
                    break;
            }

            k.update(pesel, table, columnName, id, data.toString());

            scoutRankTableInit();
            scoutTableInit();
        }
    }
}
